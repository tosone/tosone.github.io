<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Tosone&#39;s Blog</title>
    <link>https://www.tosone.cn/post/</link>
    <description>Recent content in Posts on Tosone&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 24 Oct 2020 15:53:21 +0800</lastBuildDate><atom:link href="https://www.tosone.cn/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang Memory Align</title>
      <link>https://www.tosone.cn/post/golang-mem-align/</link>
      <pubDate>Sat, 24 Oct 2020 15:53:21 +0800</pubDate>
      
      <guid>https://www.tosone.cn/post/golang-mem-align/</guid>
      <description>&lt;p&gt;操作系统并非一个字节一个字节访问内存，而是按 2, 4, 8 这样的字长来访问。因此，当 CPU 从存储器读数据到寄存器，或者从寄存器写数据到存储器，IO 的数据长度通常是字长。如 32 位系统访问粒度是 4 字节，64 位系统的是 8 字节。&lt;/p&gt;
&lt;p&gt;当被访问的数据长度为 n 字节且该数据地址为n字节对齐，那么操作系统就可以高效地一次定位到数据，无需多次读取、处理对齐运算等额外操作。&lt;/p&gt;
&lt;p&gt;数据结构应该尽可能地在自然边界上对齐。如果访问未对齐的内存，CPU需要做两次内存访问。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;原文链接：&lt;a href=&#34;https://xie.infoq.cn/article/594a7f54c639accb53796cfc7&#34;&gt;https://xie.infoq.cn/article/594a7f54c639accb53796cfc7&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>[转] NodeJs 的那点历史</title>
      <link>https://www.tosone.cn/post/node-iojs/</link>
      <pubDate>Tue, 12 Nov 2019 22:01:55 +0800</pubDate>
      
      <guid>https://www.tosone.cn/post/node-iojs/</guid>
      <description>&lt;p&gt;2014 年 12 月，多位重量级 Node.js 开发者不满 Joyent 对 Node.js 的管理，自立门户创建了 io.js。io.js 的发展速度非常快，先是于 2015 年 1 月份发布了 1.0 版本，并且很快就达到了 2.0 版本，社区非常活跃。而最近 io.js 社区又宣布，这两个项目将合并到 Node 基金会下，并暂时由 Node.js 和 io.js 核心技术团队联合监督”运营。本文将聊一聊Node.js 项目的一些历史情况，与 io.js 项目之间的恩怨纠葛，他们将来的发展去向。希望能从历史的层面去了解这个开源项目在运营模式上是如何演变和发展的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gitea</title>
      <link>https://www.tosone.cn/post/gitea/</link>
      <pubDate>Wed, 23 Oct 2019 21:03:15 +0800</pubDate>
      
      <guid>https://www.tosone.cn/post/gitea/</guid>
      <description>&lt;p&gt;A painless self-hosted Git service. Gitea is a community managed lightweight code hosting solution written in Go.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>High available shadowsocks</title>
      <link>https://www.tosone.cn/post/ss-nginx/</link>
      <pubDate>Wed, 23 Oct 2019 19:38:03 +0800</pubDate>
      
      <guid>https://www.tosone.cn/post/ss-nginx/</guid>
      <description>&lt;p&gt;我们都知道国内总有一些 404 的网站，但是某些有技术的人总能访问到一些不存在的网站，这个在之前的文章中有说，有这&lt;a href=&#34;https://tosone.cn/post/shadowsocks-ppt/&#34;&gt;一篇&lt;/a&gt;，也有这&lt;a href=&#34;https://tosone.cn/post/shadowsocks/&#34;&gt;一篇&lt;/a&gt;，但是每到一些关键节日，某些技术比较不是特别强的人只能等比较严格的网络封锁过去之后才能再去访问那些网站，但是有没有一种永远可用特别高级的方式呢？答案是有的。快看！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode C/C&#43;&#43;</title>
      <link>https://www.tosone.cn/post/leetcode-c-c&#43;&#43;/</link>
      <pubDate>Sat, 20 Jul 2019 12:47:23 +0800</pubDate>
      
      <guid>https://www.tosone.cn/post/leetcode-c-c&#43;&#43;/</guid>
      <description>&lt;p&gt;LeetCode 上做一些 C/C++ 的算法的时候总会出现一些奇奇怪怪的问题。如何在本地的时候把问题解决解决或者 Debug 出来呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mac 下更换 Homebrew 镜像源</title>
      <link>https://www.tosone.cn/post/homebrew/</link>
      <pubDate>Sat, 20 Jul 2019 12:09:17 +0800</pubDate>
      
      <guid>https://www.tosone.cn/post/homebrew/</guid>
      <description>&lt;p&gt;Mac 下更换 Homebrew 镜像源，加速软件的更新以及下载。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cloudify Tutorial</title>
      <link>https://www.tosone.cn/post/cloudify/</link>
      <pubDate>Sat, 20 Jul 2019 11:22:09 +0800</pubDate>
      
      <guid>https://www.tosone.cn/post/cloudify/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;A single open source, end-to-end platform designed to transform network services and applications, connect branches, deploy and manage multi-access edge and IoT devices, break down silos and deliver all services on-demand – automatically, at scale.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Kubernetes Tutorial</title>
      <link>https://www.tosone.cn/post/kubernetes-tutorial/</link>
      <pubDate>Thu, 27 Jun 2019 23:03:09 +0800</pubDate>
      
      <guid>https://www.tosone.cn/post/kubernetes-tutorial/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Kubernetes&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; is an open-source system for automating deployment, scaling, and management of containerized applications.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;It groups containers that make up an application into logical units for easy management and discovery. Kubernetes builds upon 15 years of experience of running production workloads at Google, combined with best-of-breed ideas and practices from the community.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>CoreOS 初始化配置</title>
      <link>https://www.tosone.cn/post/coreos-init/</link>
      <pubDate>Fri, 26 Apr 2019 10:38:24 +0000</pubDate>
      
      <guid>https://www.tosone.cn/post/coreos-init/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Container Linux (formerly CoreOS Linux) is an open-source lightweight operating system based on the Linux kernel and designed for providing infrastructure to clustered deployments, while focusing on automation, ease of application deployment, security, reliability and scalability. As an operating system, Container Linux provides only the minimal functionality required for deploying applications inside software containers, together with built-in mechanisms for service discovery and configuration sharing.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Golang 中如何用 CGO 与 C 之间做一个缓存 Buffer</title>
      <link>https://www.tosone.cn/post/golang-cgo-buffer/</link>
      <pubDate>Mon, 05 Nov 2018 20:00:00 +0000</pubDate>
      
      <guid>https://www.tosone.cn/post/golang-cgo-buffer/</guid>
      <description>&lt;p&gt;Golang 和 C 之间如何传递二进制数据呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CGO 注意事项</title>
      <link>https://www.tosone.cn/post/cgo-attation/</link>
      <pubDate>Wed, 12 Sep 2018 10:14:28 +0000</pubDate>
      
      <guid>https://www.tosone.cn/post/cgo-attation/</guid>
      <description>&lt;p&gt;Golang 和 C 之间相互调用存在一些局限性。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>系统初始化</title>
      <link>https://www.tosone.cn/post/linux-init/</link>
      <pubDate>Tue, 11 Sep 2018 12:53:15 +0000</pubDate>
      
      <guid>https://www.tosone.cn/post/linux-init/</guid>
      <description>&lt;p&gt;Ubuntu 和 NodeJs 的环境的初始化。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CGO 入门</title>
      <link>https://www.tosone.cn/post/cgo/</link>
      <pubDate>Tue, 10 Jul 2018 21:14:28 +0000</pubDate>
      
      <guid>https://www.tosone.cn/post/cgo/</guid>
      <description>&lt;p&gt;Golang 和 C 之间相互调用入门。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[转载] 那些 C 语言缺失的，我在 Rust 里找到了</title>
      <link>https://www.tosone.cn/post/missing-in-c-but-found-in-rust/</link>
      <pubDate>Sun, 11 Mar 2018 20:14:28 +0000</pubDate>
      
      <guid>https://www.tosone.cn/post/missing-in-c-but-found-in-rust/</guid>
      <description>&lt;p&gt;我大概在 24 年前就爱上了 C 语言。当时，我通过一本西班牙语版的 &amp;ldquo;The C Programming Language&amp;rdquo;（第二版，作者是 Brian Kernighan 和 Dennis Ritchie，所以有时候也用 K&amp;amp;R 来称呼这本书）来学习 C 语言。在这之前，我用过 Turbo Pascal，它也有指针，也需要手动管理内存，而 C 语言在当时是新生事物，但十分强大。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CGO is not Go</title>
      <link>https://www.tosone.cn/post/cgo-is-not-go/</link>
      <pubDate>Sat, 10 Mar 2018 21:14:28 +0000</pubDate>
      
      <guid>https://www.tosone.cn/post/cgo-is-not-go/</guid>
      <description>&lt;p&gt;Some people, when confronted with a problem, think &amp;ldquo;I know, I’ll use cgo.&amp;rdquo; Now they have two problems.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang 获取 goroutine id 完全指南</title>
      <link>https://www.tosone.cn/post/golang-get-goroutine-id/</link>
      <pubDate>Fri, 09 Mar 2018 21:14:28 +0000</pubDate>
      
      <guid>https://www.tosone.cn/post/golang-get-goroutine-id/</guid>
      <description>&lt;p&gt;在 Golang 中，每个 goroutine 协程都有一个 goroutine id (goid)，该goid没有向应用层暴露。但是，在很多场景下，开发者又希望使用 goid 作为唯一标识，将一个 goroutine 中的函数层级调用串联起来。比如，希望在一个 http handler 中将这个请求的每行日志都加上对应的 goid 以便于对这个请求处理过程进行跟踪和分析。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHONY target</title>
      <link>https://www.tosone.cn/post/phony-target/</link>
      <pubDate>Thu, 08 Mar 2018 21:14:28 +0000</pubDate>
      
      <guid>https://www.tosone.cn/post/phony-target/</guid>
      <description>&lt;p&gt;A phony target is one that is not really the name of a file; rather it is just a name for a recipe to be executed when you make an explicit request. There are two reasons to use a phony target: to avoid a conflict with a file of the same name, and to improve performance.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RaspberryPi 上手</title>
      <link>https://www.tosone.cn/post/raspberry-tutorial/</link>
      <pubDate>Sat, 25 Nov 2017 18:27:37 +0000</pubDate>
      
      <guid>https://www.tosone.cn/post/raspberry-tutorial/</guid>
      <description>&lt;p&gt;当你花 35 美元买到一部树莓派（Raspberry Pi）计算机的时候，机器里面是没有预装操作系统（OS）的。这个时候你要自己下载一个 OS 到 SD 卡，插到树莓派上重启完成 OS 的安装。这一切看起来很简便，但你考虑过这个跟树莓派兼容的OS是哪里来的吗？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Docker Tutorial</title>
      <link>https://www.tosone.cn/post/docker-tutorial/</link>
      <pubDate>Sun, 07 May 2017 10:59:43 +0000</pubDate>
      
      <guid>https://www.tosone.cn/post/docker-tutorial/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Securely build, share and run any application, anywhere.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>如何才能看到不该看到的东西</title>
      <link>https://www.tosone.cn/post/shadowsocks-ppt/</link>
      <pubDate>Fri, 05 May 2017 12:48:41 +0000</pubDate>
      
      <guid>https://www.tosone.cn/post/shadowsocks-ppt/</guid>
      <description>&lt;p&gt;有人不想让我们看见一些东西。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
